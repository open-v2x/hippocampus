name: ci

on:
  push:
    branches:
      - master

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: openv2x/hippocampus:latest
          build-args: |
            GIT_BRANCH=${{ github.ref_name }}
            REPO_URL=https://github.com/open-v2x/hippocampus
            GIT_COMMIT=${{ github.sha }}

  acr:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: sync image to ACR
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AIO_MASTER_HOST }}
          username: ${{ secrets.AIO_MASTER_USERNAME }}
          key: ${{ secrets.AIO_MASTER_KEY }}
          port: ${{ secrets.AIO_MASTER_PORT }}
          script: |
            set -e

            (docker images | grep none | awk '{print $3}' | xargs -I{} docker rmi -f {}) || true
            docker pull openv2x/hippocampus:latest
            docker tag openv2x/hippocampus:latest registry.cn-shanghai.aliyuncs.com/openv2x/hippocampus:latest
            docker push registry.cn-shanghai.aliyuncs.com/openv2x/hippocampus:latest

  ssh:
    needs: acr
    runs-on: ubuntu-latest
    steps:
      - name: apply to cicd environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LAB_HOST }}
          username: ${{ secrets.LAB_USERNAME }}
          password: ${{ secrets.LAB_PASSWORD }}
          port: ${{ secrets.LAB_PORT }}
          script: |
            set -e
          
            rm -rf /tmp/config
            mkdir /tmp/config && cd /tmp/config
            wget https://raw.githubusercontent.com/open-v2x/hippocampus/master/config/default.yml
            container_names=(`cat default.yml | grep "container_name" | awk '{print $3}'`)
            cameras=(`cat default.yml | grep "camera_id" | awk '{print $3}'`)
            rtsp_urls=(`cat default.yml | grep "rtsp" | awk '{print $3}'`)
          
            containers=(ffmpeg ffmpeg-1 ffmpeg-2 ffmpeg-3 rtsp-simple-server rtsp-simple-server-1 rtsp-simple-server-2 rtsp-simple-server-3 lalserver)
            to_delete=(${containers[@]}  ${container_names[@]})
            for i in ${to_delete[@]}; do
              docker stop $i 2>/dev/null || true
              docker rm $i 2>/dev/null || true
            done
            docker rmi registry.cn-shanghai.aliyuncs.com/openv2x/hippocampus:latest || true
            docker images | grep none | awk '{print $3}' | xargs -I{} docker rmi -f {}
          
            docker run -d -p 1935:1935 -p 7001:8080 --restart=always --name=lalserver q191201771/lal /lal/bin/lalserver -c /lal/conf/lalserver.conf.json

            docker run -d -e RTSP_PROTOCOLS=tcp -p 8554:8554 --restart=always --name=rtsp-simple-server-1 aler9/rtsp-simple-server
            docker run -d -e RTSP_PROTOCOLS=tcp -p 8555:8554 --restart=always --name=rtsp-simple-server-2 aler9/rtsp-simple-server
            docker run -d -e RTSP_PROTOCOLS=tcp -p 8556:8554 --restart=always --name=rtsp-simple-server-3 aler9/rtsp-simple-server
            # jrottenberg/ffmpeg:3.4-rockylinux8
            docker run -d -v ~/Videos/test.mp4:/tmp/workdir/test.mp4 --restart=always --name=ffmpeg-1 --net=host registry.cn-shanghai.aliyuncs.com/openv2x/ffmpeg:3.4-rockylinux8 -re -stream_loop -1 -i /tmp/workdir/test.mp4 -r 25 -c:v libx264 -s 1920x1080 -rtsp_transport tcp -f rtsp rtsp://localhost:8554/mystream
            docker run -d -v ~/Videos/test.mp4:/tmp/workdir/test.mp4 --restart=always --name=ffmpeg-2 --net=host registry.cn-shanghai.aliyuncs.com/openv2x/ffmpeg:3.4-rockylinux8 -re -stream_loop -1 -i /tmp/workdir/test.mp4 -r 25 -c:v libx264 -s 1920x1080 -rtsp_transport tcp -f rtsp rtsp://localhost:8555/mystream
            docker run -d -v ~/Videos/test.mp4:/tmp/workdir/test.mp4 --restart=always --name=ffmpeg-3 --net=host registry.cn-shanghai.aliyuncs.com/openv2x/ffmpeg:3.4-rockylinux8 -re -stream_loop -1 -i /tmp/workdir/test.mp4 -r 25 -c:v libx264 -s 1920x1080 -rtsp_transport tcp -f rtsp rtsp://localhost:8556/mystream

            docker pull registry.cn-shanghai.aliyuncs.com/openv2x/hippocampus-base:latest
            docker pull registry.cn-shanghai.aliyuncs.com/openv2x/hippocampus:latest
            for((i=0;i<${#cameras[@]};i++)); do
              nvidia-docker run -d --restart=always --name=${container_names[i]} -e camera_id=${cameras[i]} -e rtsp=${rtsp_urls[i]} --gpus all --net=host registry.cn-shanghai.aliyuncs.com/openv2x/hippocampus:latest
            done
